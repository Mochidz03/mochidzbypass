(function() {
    'use strict';

    // Log khởi động an toàn
    try {
        console.log('Script started on:', document.location.href || 'unknown');
    } catch (e) {
        console.log('Failed to log start, proceeding silently');
    }

    // Cấu hình
    const yeumoneyDomain = 'yeumoney.com';
    const verificationDomains = {
        '188BET': {
            url: 'https://165.22.63.250/',
            waitTime: 55000,
            articleUrl: 'https://165.22.63.250/soi-keo-real-madrid-vs-rb-leipzig-07-03-2024/',
            codeWaitTime: 25000
        },
        'M88': {
            url: 'https://bet88bi.com/',
            waitTime: 60000,
            articleUrl: 'https://bet88bi.com/chien-thuat-1-3-2-6-trong-baccarat/',
            codeWaitTime: 30000
        },
        'W88': {
            url: 'https://188.166.185.213/',
            waitTime: 60000,
            articleUrl: 'https://188.166.185.213/top-game-slot-gpi-pho-bien/',
            codeWaitTime: 30000
        }
    };
    const processingWaitTime = 75000;
    const randomDelay = () => Math.floor(Math.random() * 2000) + 500;

    // Mô phỏng hành vi người dùng
    function simulateUserBehavior() {
        try {
            if (document.documentElement) {
                const scrollY = Math.floor(Math.random() * 100) + 50;
                window.scrollBy(0, scrollY);
                console.log('Simulated scroll by:', scrollY);
            }
        } catch (e) {
            console.log('Failed to simulate scroll:', e);
        }
    }

    // Kiểm tra trang
    function isYeumoneyPage() {
        try {
            return typeof document.location !== 'undefined' && document.location.hostname.includes(yeumoneyDomain);
        } catch (e) {
            console.log('Error checking domain:', e);
            return false;
        }
    }

    function isVerificationPage() {
        try {
            return Object.values(verificationDomains).some(domain => {
                return typeof document.location !== 'undefined' && document.location.href.includes(domain.url);
            });
        } catch (e) {
            console.log('Error checking verification page:', e);
            return false;
        }
    }

    function isArticlePage() {
        try {
            return Object.values(verificationDomains).some(domain => {
                return typeof document.location !== 'undefined' && document.location.href === domain.articleUrl;
            });
        } catch (e) {
            console.log('Error checking article page:', e);
            return false;
        }
    }

    // Chờ DOM sẵn sàng
    function waitForDOMReady() {
        return new Promise(resolve => {
            if (document.readyState === 'complete') {
                resolve();
            } else {
                window.addEventListener('load', resolve);
            }
        });
    }

    // Chờ phần tử
    async function waitForElement(selector, timeout = 15000) {
        console.log(`Waiting for ${selector}`);
        return new Promise((resolve, reject) => {
            try {
                let found = false;
                const checkElement = () => {
                    const element = document.querySelector(selector);
                    if (element) {
                        console.log(`Found ${selector}`);
                        found = true;
                        clearInterval(interval);
                        resolve(element);
                    }
                };

                const interval = setInterval(checkElement, 100);
                checkElement(); // Kiểm tra ngay lập tức

                setTimeout(() => {
                    if (!found) {
                        console.error(`Timeout waiting for ${selector}`);
                        clearInterval(interval);
                        reject(new Error(`Không tìm thấy ${selector} trong ${timeout}ms`));
                    }
                }, timeout);
            } catch (e) {
                console.error(`Error waiting for ${selector}:`, e);
                reject(e);
            }
        });
    }

    // Mô phỏng hành động
    function simulateInput(element, value) {
        try {
            if (element && 'value' in element) {
                element.value = value;
                element.dispatchEvent(new Event('input', { bubbles: true }));
                element.dispatchEvent(new Event('change', { bubbles: true }));
                console.log('Input simulated with value:', value);
            }
        } catch (e) {
            console.error('Failed to simulate input:', e);
        }
    }

    function simulateClick(element) {
        try {
            if (element) {
                element.dispatchEvent(new MouseEvent('click', { bubbles: true }));
                console.log('Click simulated on element');
            }
        } catch (e) {
            console.error('Failed to simulate click:', e);
        }
    }

    // Lấy mã từ bài viết
    async function getCodeFromArticlePage() {
        try {
            console.log('Looking for get code button on article page');
            const getCodeButton = await waitForElement('a:contains("Lấy mã"), button:contains("Lấy mã"), #get-code-btn');
            simulateClick(getCodeButton);

            const domain = Object.keys(verificationDomains).find(key => document.location.href.includes(verificationDomains[key].articleUrl));
            const codeWaitTime = verificationDomains[domain].codeWaitTime;
            console.log(`Waiting ${codeWaitTime / 1000}s for code`);
            simulateUserBehavior();
            await new Promise(resolve => setTimeout(resolve, codeWaitTime + randomDelay()));
            const codeElement = await waitForElement('input[name="code"], #code, .code, input[type="text"]');
            const code = codeElement.value || (codeElement.textContent && codeElement.textContent.trim()) || '';
            if (code) {
                GM_setValue('verificationCode', code);
                console.log('Code found:', code);
                window.close();
            } else {
                throw new Error('Không tìm thấy mã');
            }
        } catch (error) {
            console.error('Lỗi lấy mã:', error);
            window.close();
        }
    }

    // Xử lý trang xác nhận
    async function handleVerificationPage() {
        try {
            console.log('Processing verification page');
            const domain = Object.keys(verificationDomains).find(key => document.location.href.includes(verificationDomains[key].url));
            const waitTime = verificationDomains[domain].waitTime;
            const articleUrl = verificationDomains[domain].articleUrl;
            console.log(`Waiting ${waitTime / 1000}s`);
            simulateUserBehavior();
            await new Promise(resolve => setTimeout(resolve, waitTime + randomDelay()));
            const articleLink = await waitForElement(`a[href="${articleUrl}"]`);
            simulateClick(articleLink);
        } catch (error) {
            console.error('Lỗi xử lý trang xác nhận:', error);
            window.close();
        }
    }

    // Logic chính
    async function bypassYeumoney() {
        try {
            await waitForDOMReady();
            console.log('DOM ready, starting bypass');

            if (isArticlePage()) {
                console.log('On article page');
                await getCodeFromArticlePage();
                return;
            }
            if (isVerificationPage()) {
                console.log('On verification page');
                await handleVerificationPage();
                return;
            }
            if (!isYeumoneyPage()) {
                console.log('Not a Yeumoney page');
                return;
            }

            console.log('Starting bypass on Yeumoney');
            simulateUserBehavior();
            const getCodeButton = await waitForElement('button:contains("Lấy mã"), #get-code-btn');
            console.log('Found get code button');
            simulateClick(getCodeButton);
            await new Promise(resolve => setTimeout(resolve, randomDelay()));

            const processingMessage = await waitForElement('div:contains("Đang xử lý! Vui lòng đợi 75 giây..."), #processing-message', 5000);
            if (processingMessage) {
                console.log('Found processing message, waiting 75s');
                simulateUserBehavior();
                await new Promise(resolve => setTimeout(resolve, processingWaitTime + randomDelay()));
            }

            const platformElement = await waitForElement('span:contains("188BET"), span:contains("M88"), span:contains("W88")');
            const platform = platformElement.textContent.trim();
            console.log('Detected platform:', platform);
            const verifyUrl = verificationDomains[platform].url;
            if (!verifyUrl) throw new Error('Không tìm thấy URL xác nhận');

            window.open(verifyUrl, '_blank');
            console.log('Opened verification tab:', verifyUrl);
            await new Promise(resolve => setTimeout(resolve, 5000));

            let attempts = 0;
            let code = GM_getValue('verificationCode', '');
            while (!code && attempts < 5) {
                console.log(`Attempt ${attempts + 1} to get code`);
                await new Promise(resolve => setTimeout(resolve, 10000));
                code = GM_getValue('verificationCode', '');
                attempts++;
            }
            if (!code) throw new Error('Không lấy được mã');

            const codeInput = await waitForElement('input[name="code"], #code-input, input[type="text"]');
            console.log('Found code input, entering code');
            simulateInput(codeInput, code);
            await new Promise(resolve => setTimeout(resolve, randomDelay()));

            const confirmButton = await waitForElement('button:contains("Xác nhận"), #confirm-btn');
            console.log('Found confirm button');
            simulateClick(confirmButton);
            await new Promise(resolve => setTimeout(resolve, randomDelay()));

            const finalLink = await waitForElement('a[href*="final"], a:not([href*="javascript"])');
            console.log('Found final link, redirecting');
            if (finalLink && finalLink.href) {
                window.location.href = finalLink.href;
            } else {
                throw new Error('Không tìm thấy link cuối');
            }
        } catch (error) {
            console.error('Lỗi vượt link:', error);
        }
    }

    // Chạy script
    if (document.readyState) {
        bypassYeumoney();
    } else {
        window.addEventListener('load', bypassYeumoney);
    }
})();
